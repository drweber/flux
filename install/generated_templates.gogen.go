// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 7, 30, 16, 51, 31, 100963419, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 7, 30, 16, 51, 31, 100963419, time.UTC),
			uncompressedSize: 5888,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x5f\x6f\x1b\xb9\x11\x7f\xf7\xa7\x18\x28\x0f\x49\x00\x69\x65\x9d\xaf\x45\xb1\x57\x1f\x90\x4b\x2e\x69\x9a\x8b\x63\xc4\x4d\x8b\x3e\xf5\x28\xee\x48\x4b\x88\x4b\x6e\x39\xa4\x74\x82\x71\xdf\xfd\x30\xe4\xfe\xe1\x5a\x72\x7c\x48\x1e\x62\x9b\x3b\xff\x67\xf8\x9b\x19\x2e\x16\x8b\x0b\xd1\xaa\x7f\xa3\x23\x65\x4d\x09\xa2\x6d\x69\xb9\x5f\x5d\xec\x94\xa9\x4a\x78\x83\xad\xb6\xc7\x06\x8d\xbf\x68\xd0\x8b\x4a\x78\x51\x5e\x00\x18\xd1\x60\x09\x1b\x1d\x7e\xbb\xbf\x07\xb5\x81\xe2\x46\x34\x48\xad\x90\x08\xbf\xff\xde\x7d\x8f\x7f\x96\x70\x7f\x3f\xfd\x7a\x7f\x0f\x68\x2a\x26\xa3\x16\x25\x0b\x73\xd8\x6a\x25\x05\x95\xb0\xba\x00\x20\xd4\x28\xbd\x75\xfc\x05\xa0\x11\x5e\xd6\xbf\x88\x35\x6a\x4a\x07\xb9\x6e\xa6\xf6\x4e\x78\xdc\x1e\xd3\x47\x7f\x6c\xb1\x84\xcf\x28\x1d\x0a\x8f\x17\x00\x1e\x9b\x56\x0b\x8f\x9d\xb0\xcc\x03\xfe\x27\x8c\xb1\x5e\x78\x65\xcd\x20\x1c\xa0\x75\xb6\x41\x5f\x63\xa0\x42\xd9\x65\x6b\x9d\x2f\x61\x76\x75\x79\xb5\x9a\xc1\x33\xf0\xa8\x75\x46\x01\xde\x02\x49\x27\x5a\x84\x65\x83\xde\x29\x49\xec\x5c\x6b\x95\xf1\xcf\x09\x98\xb9\xe8\x04\xeb\x89\x0f\x0f\xbc\x00\xe8\x63\x11\x7f\x47\xb7\x57\x12\x5f\x49\x69\x83\xf1\x37\x53\x42\x80\xbd\xd5\xa1\xc1\x41\xd4\xa2\x13\xb5\x55\x7e\xb1\xc3\xe3\xa0\x80\x38\x0a\x7e\x54\xd8\x9f\x8c\xf2\x16\xcc\x52\xc5\x04\x67\x54\x15\x6e\x44\xd0\xfe\xa3\xad\xb0\x84\xcb\xef\x2f\x2f\xe1\x19\x1c\x6a\x34\xd0\xb0\x35\x58\x81\x43\x51\x2d\xac\xd1\xc7\x39\x1c\x10\x0e\xd6\x3c\xf7\xb0\x46\x10\x6b\x8d\x1c\x0f\x59\x37\xb6\xba\xe8\x04\x3e\x83\x7f\xd5\x8a\x40\x11\x08\xf0\x4d\xbb\x21\x08\x84\x15\x6c\xac\x83\x2d\x1a\x74\xc2\x2b\xb3\x85\xbb\xbb\x7f\xc0\x0e\x8f\x54\xc0\x7b\x03\x1f\xfe\x46\xf0\xe3\x35\xac\x8a\xd5\xe5\x7c\x90\xd2\xeb\x4e\x2e\x10\x08\x87\xb9\x1d\x64\xd9\x14\x83\x58\x81\x00\xc2\x56\x70\x51\x74\x81\x82\x03\x0e\x62\xa4\x30\x70\x70\xca\xb3\xa1\xc5\xf9\xf8\x6d\xd1\x0c\xc1\xc0\xa6\xf5\xc7\x37\xca\xe5\x41\x6c\xb0\x52\xa1\x29\xe1\x23\x36\xd6\x1d\x73\x3f\x11\x36\x56\x6b\x7b\x60\x8f\x3a\xd5\x8a\xa2\xab\x81\xf8\x4c\x80\x0c\xe4\x6d\xa3\x38\x02\x3b\x63\x0f\xe6\x7f\xb5\x25\x4f\x83\x88\x8d\xd2\x38\x87\x43\xad\x64\x0d\x47\x1b\xe0\xa0\xb4\x4e\x4e\x79\x0b\x95\xe5\x7b\xc6\xc7\xcc\xc4\xbf\x38\xb0\x07\xc3\x66\x0f\x02\x1c\xb6\x16\x9c\xf0\x35\x3a\xf0\xb5\x30\x9d\xe2\xad\xf2\x75\x58\x83\xe5\x43\x04\xad\x76\x58\xc0\x7f\x6d\x78\xae\x35\x08\x4d\xb6\x57\x31\x0d\x36\x28\x0f\xca\x78\x1b\x79\xa4\x35\x5e\x28\x83\x6e\x0e\x6b\xd4\xf6\x50\xc0\x1d\x8e\x51\xad\xbd\x6f\xa9\x5c\x2e\x93\x9e\x42\xda\x66\x79\x40\xb1\xc7\x83\x75\x3b\x5a\x72\xa5\x2d\xd7\xda\xae\x97\x8d\x20\x8f\x6e\x59\x59\x49\xcb\xe5\x36\xa8\x0a\x69\x19\x08\x17\xad\x53\x7b\xe1\x31\x96\x23\x3b\x57\x34\xd5\x20\xbb\xcf\x0e\x51\xbd\x90\xd6\x6c\xd4\x76\xf8\x04\x90\x0e\x3e\x8a\xb6\xcc\x0e\xf3\xab\xb5\xc8\xd8\xbe\x35\x53\xc5\x2e\xac\x71\x99\x84\x8c\x05\xf9\x64\x96\x0e\x8a\x6a\x3e\xa9\xc5\x1e\x41\x40\xa5\x36\x1b\x74\x0c\xa3\xbd\x84\xee\x9e\x8d\x50\x19\x93\x92\xc4\xe5\x69\x61\xb8\xd9\xab\x0a\xfb\x44\x6c\xd4\xb6\x11\xed\x68\x88\xf2\x35\x08\x03\x68\xbc\x3b\x46\x1f\x7e\x4d\x44\xbf\xce\x41\x98\x0a\x82\x91\xb6\x61\xfc\x8e\xfc\xc9\xdb\x8f\x31\xc1\xc2\x8c\x61\x46\xb3\x8f\x12\x14\x52\x97\xe1\x93\x0c\x70\x18\xbe\x21\x03\x19\xdb\x93\x19\x88\xd8\xe0\x2d\xa8\x86\x91\x13\xde\xdd\xbe\x8b\xb0\x00\x2f\xd8\x2d\x52\x5b\xa3\xcc\xa8\x9c\x9d\xdb\xa3\x53\x1b\x25\x23\x84\x43\x1b\x5c\x6b\x09\xe9\xe5\x9f\x08\xe4\x20\x25\x01\x4a\x8a\x22\x07\x88\xf5\xfd\x89\xc0\x81\x70\xdb\xf1\xe2\x3e\x12\xb1\x6d\xbb\x65\x44\xa1\x2c\x34\x53\x50\x7e\xf6\x08\x2c\x9f\xf2\x9d\x81\xe5\x3e\x9c\xc3\xdd\x3c\xe9\x08\x59\xcf\xe8\xa2\xee\x30\x22\xa7\xb1\x30\x2b\xb9\x2d\x92\x9f\x81\x6a\xc4\x16\x53\xf5\x33\x43\x01\x6f\x95\xa9\xa2\xcf\x0d\x03\x8d\x43\x39\x56\x6d\x02\x19\x8d\x82\x90\xe1\x24\xb2\x72\x12\x78\x72\x00\xe1\x07\x24\x60\x18\xa8\xac\xdc\xa1\x8b\x68\xe0\x4e\xf0\xc0\x8b\x21\x7c\x7d\x2e\x79\x0a\xe0\x09\x81\x35\x7b\xb1\x05\xb6\xb6\x18\x68\xa2\xaa\x12\x3a\xa1\xca\x46\x31\xb2\x8a\x3f\xca\x55\xb1\xba\x2a\xae\xa6\xb4\xb7\x41\xeb\x5b\xab\x95\x3c\x96\xf0\x7e\x73\x63\xfd\xad\x43\xca\x3d\x71\x48\x36\x38\x89\x94\xa3\xbb\xc3\xff\x07\x24\x3f\x39\x03\x90\x6d\x28\xe1\x2f\x97\xcd\xe4\xb0\x89\x0d\xa0\x84\xbf\x7e\xff\x51\x8d\xc3\x83\x75\x39\xf3\x62\xcc\xce\x6d\x1c\x24\xae\x2e\xaf\xb8\x9f\x2a\xb3\xb1\xae\x89\x65\x2b\xf4\x40\x9d\xd5\xd8\x44\xc6\xf9\xfe\x0e\x09\xa7\x6f\x85\xaf\x4b\x58\xa2\x97\x31\x16\xd5\x92\xa8\xe6\x41\xc5\xa6\xd1\x09\xb4\xed\xae\xc7\x56\xed\xd1\x80\x32\x29\x3c\xcf\x29\xf1\x10\xd5\xcb\xc9\xad\x4e\x51\x10\xd5\x27\xa3\x8f\x25\x78\x17\x90\xa5\x71\x13\x8f\x17\x6a\xdd\xe1\x10\x57\x40\x8b\x6e\x63\x9d\x44\x16\x9a\xba\x36\x37\xed\xc7\x0c\xcf\x1b\xeb\xd4\xf6\xbd\x70\x9d\xed\x89\xec\xdb\xcc\xcf\xca\xe9\xbd\x91\x3a\xc4\x8b\xce\xb3\x47\xc2\xe3\x1e\x04\x52\x73\x7b\xa2\x17\xf7\xdd\xf8\x07\x66\x7d\xd0\x27\x07\x30\x80\x0a\xa5\x16\x8e\x67\x8e\xb5\xdd\x67\xb5\xfa\x95\xae\x95\x6e\x73\xee\xbc\xb3\xd6\x2f\x0b\xa2\xfa\x51\x07\x84\x99\x68\x9d\x8d\x88\x3a\x4b\x9a\xe7\x3d\x49\x26\x01\xcd\x5e\x39\x6b\x22\x7e\xa5\xd6\x30\xfb\xf0\xe5\xa7\x9f\x5f\x7f\xba\x79\xfb\xfe\xdd\x2c\x21\xd6\x9c\xe3\x61\xf7\xe8\xdc\xb4\xbd\x64\x62\x22\x22\xaf\x8f\x09\xfc\xbd\x3e\xe7\xe3\x49\x5f\x38\xf5\x71\x2c\x4e\x26\x7e\xd4\x51\x86\x68\x9e\x9c\x7b\x6d\x8c\x28\x59\xe7\xec\xac\x8b\x39\xc9\x44\x3c\xec\xbf\x79\xd2\x63\xf3\xed\x67\x47\x61\x40\x68\x8f\xce\xf0\x6c\x78\x62\xf1\xc6\xd9\x86\xcb\xa2\x6f\xb0\x73\x10\xc4\xe5\xd6\x35\x01\x0e\x83\xb6\x72\x47\xa7\xc9\x46\xb3\x2f\xcf\xc4\x65\x0c\xf7\x24\x2e\x7b\xa1\x03\x9e\xc4\xe4\xa9\x22\x7e\x58\x03\x7d\x8b\xf8\x4a\x05\x70\x87\x9a\x76\xa6\xaf\xf4\xa6\x47\xea\x92\xa9\x52\x33\x9e\xd0\x4d\xf1\x61\x34\x9a\x55\x96\x13\x1f\x52\x1a\xd2\x8e\x81\x15\x63\xa6\x14\xb2\xc6\x8a\x23\x9b\xa7\x76\x18\x82\x38\x89\x1c\x96\x79\x26\xc5\xba\x6e\xca\xc9\x18\xba\x1d\x29\x32\xce\xa3\x12\x9e\xed\x29\xb4\xad\x3e\x72\x20\x28\x0f\xc5\x38\x6b\xf8\x83\x65\x2b\x03\xa7\x34\x16\x5c\x5c\xe8\x62\x1e\xa0\xb6\x87\xb8\xbf\x58\x63\x50\xfa\x38\x87\xf8\x69\xe8\x16\x8b\xc1\x81\x38\xa8\xb2\xf2\xeb\xe1\xa8\xe8\x5a\x74\x41\x7b\x59\x48\x1d\x78\xd8\x2d\x18\xbf\x74\x1e\x92\x2f\x94\xae\xda\x18\x8a\xd7\x89\xf4\xfd\xed\xc4\x29\xbe\x75\x84\x3e\xee\x47\xd3\xc4\x8e\x36\xf4\xf4\xbc\x85\x7a\xc7\x94\x71\x63\xc9\x10\x38\xb7\xb8\xa3\xbe\xbe\x98\xcc\x04\x8a\xa0\x09\x14\x37\xb8\x18\x3d\x85\x55\xaa\xa6\x75\xc4\xf5\xd8\x8d\xe3\xe2\xf6\xa2\xdf\x86\x5e\xe6\xb6\xf4\x77\x2b\x55\x21\x0f\x11\xd9\xfe\x36\x31\x84\xb1\x30\xe1\xfb\xa2\x52\xee\xfa\x04\xf5\x73\xb3\x3e\x67\xb3\xc0\x98\xbc\x2f\x9f\x7f\x49\x0b\xa6\x30\xdb\xf4\xed\x9d\xf2\x71\xe9\x21\xe5\xad\x3b\x0e\x68\xf5\x96\xe7\x98\x89\x72\xee\x41\xc1\xe9\xeb\xfb\x7b\x28\xde\x29\xcf\x92\xe2\x3b\xc5\x94\x62\xed\x84\x91\x75\x4f\xf4\x53\xfc\x2b\xbd\x58\xa8\x4d\x3c\xe2\xbb\x41\xe7\x38\x5b\xe1\x23\xdf\x5d\x4c\x03\xfd\xd3\x2a\x93\x31\xcc\xe6\xb3\xee\xe1\x43\x13\xe6\xec\x3c\x09\x9c\xb6\xaa\x83\x30\xb1\xfc\x1c\x72\x56\x65\x1a\x40\x1b\x61\xd4\x86\x47\x13\x2e\x50\x52\x15\xba\xe4\xeb\x83\x21\x2f\x2e\x6c\x96\x10\x82\xa9\xd0\x3d\x08\xa0\x43\x2d\xbc\xda\x23\xb4\xd1\xac\x2e\xbd\xdb\x49\x10\x1f\x14\xfc\xe0\x1c\x85\x75\xa5\xdc\x6a\x9e\x7e\x7e\x37\xbc\xe2\x8c\xc1\x89\xaf\x34\xe7\x82\x13\x9f\x3e\xfa\xa8\xf6\x54\x67\x04\x7c\x21\x74\xe7\xf8\x03\xa1\x1b\x32\xc7\x34\x70\x9e\xff\xe7\x46\xa8\xb3\x06\x20\x7f\xe8\x25\xf4\x54\xe3\x3b\xd4\x59\xd0\x45\xbe\xa7\x07\xcb\x01\x45\x13\xdf\x36\x38\x4e\xdc\x0d\x94\x7f\xb0\x8b\xe4\xb1\xea\x70\xb5\x43\xcd\xeb\xaf\xc0\x68\xcf\xd1\xc9\x62\xae\xeb\xbf\xef\xf0\x08\xaa\xfa\x71\x20\xfb\x4a\xab\xcc\xac\x62\x11\xc2\x07\x87\x93\x85\xe8\x8c\xae\xf8\xf9\xb8\x18\xe8\xe9\x71\xdf\x0d\xfe\xe6\xfb\x00\x64\x90\x28\x0c\xcc\x42\x4b\xde\xa1\x68\x66\x3d\x60\x65\x42\x5e\x60\xb1\x2d\xe6\xf0\x1f\x9e\xf7\xe1\xb5\xb6\xa1\x7a\x59\xc4\x7d\xcf\xdb\x1d\xcf\x6f\x04\xad\x70\x5e\xc9\xa0\x85\x83\xee\x75\xa1\x93\xf2\x10\x6b\x3b\xad\xd7\x07\xe2\x95\x42\xb2\xac\x22\xee\x11\x45\x5a\x24\x44\xab\x96\x0f\xaa\x9f\xd9\xa2\xa2\x6b\xb1\x96\xab\xef\xae\x4e\xff\xcf\x1d\xbe\x43\xb7\x3f\xf3\x70\xc7\x63\xc7\xd8\x68\x38\x6b\x3f\xe4\x88\x27\x76\x8c\x94\x2e\xa1\x2e\xfa\xec\x35\xf0\x79\xf6\xa0\x98\xbd\x0c\xb2\x8b\x71\x9f\x8d\xad\x7f\x8a\x4b\x5a\x91\x47\xb3\xe8\x4c\xb8\x2e\xaf\x2e\xaf\x56\x17\x5d\x45\xbf\xaa\x2a\x95\x36\x04\xc6\xb3\x57\xdc\xce\x27\xd0\x31\x7e\x1f\x5b\xda\xfd\x3d\xb8\x88\x8e\x4f\x70\x2f\xe2\xb3\xec\xe4\x16\x8c\xbf\xf5\x0a\x3e\xb5\x9d\xf8\x37\x37\x77\x7d\x2f\xa2\x79\x37\x22\x05\xd7\x75\x26\x30\x95\xf5\x04\x36\x12\x43\x23\x8e\x71\xb3\xd2\xfb\x71\xc7\x36\xa4\xad\xdd\x85\x16\x14\x51\x40\x02\x6b\x80\x6c\x83\xf0\x21\xac\xd1\x19\xf4\x48\x2c\x3d\xb4\x34\xae\xd0\x95\xa1\x7e\x79\x9b\xdd\x58\x83\xb3\xfc\xcb\xeb\x68\x40\xbe\x44\x27\xe5\x34\xdd\xab\xfb\x51\x27\xda\x37\xf9\x32\x4c\x61\xb3\xd5\xec\xe2\x8f\x00\x00\x00\xff\xff\xf1\x12\x73\x2a\x00\x17\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 874,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x93\xcd\x6e\x9c\x40\x10\x84\xef\x3c\x45\x49\x7b\x0d\x1b\x61\x69\x2f\xdc\xa2\x38\x89\x2c\x25\xd6\x5e\x9c\x7b\x7b\x68\xf0\x28\xf3\x97\xe9\x66\xb3\x04\xf9\xdd\xa3\xd9\x5f\x36\xf6\x9c\x80\xaa\xaf\xa7\xa6\x80\xba\xae\xab\x15\x3c\x7b\x43\xe6\x85\x3b\x74\x9c\x5c\x9c\x3c\x07\xc5\x28\xdc\xe1\x79\xc2\x57\x37\xee\xa1\x11\x07\x47\xb5\x82\x89\x41\xc9\x06\xce\xb0\x9e\x06\x86\x67\xa5\x8e\x94\xd6\x15\x25\xfb\x93\xb3\xd8\x18\x5a\x50\x4a\xf2\x71\xd7\x54\xbf\x6c\xe8\x5a\xdc\x5f\xc6\x56\x67\x7b\x5b\x01\x81\x3c\xb7\xd7\xdd\xe7\x19\xb6\xc7\xfa\x91\x3c\x4b\x22\xc3\x78\x7d\x3d\x99\x0e\xb7\x2d\xe6\xf9\x56\x9d\x67\x70\xe8\x8a\x4d\x12\x9b\x32\x31\x73\x72\xd6\x90\xb4\x68\x2a\x40\xd8\xb1\xd1\x98\x8b\x02\x78\x52\xf3\xf2\x9d\x9e\xd9\xc9\xf1\xc1\x9b\x00\x15\xa0\xec\x93\x23\xe5\x13\xb2\x08\x5b\x96\xbb\xa1\xdf\xe3\x81\x73\x94\xb2\x2e\x5d\x5d\x98\xfa\x5d\xa6\xac\x43\x9b\x0b\xa1\x6d\xd6\x9b\x75\xb3\xb9\xd5\xb7\xa3\x73\xdb\xe8\xac\x99\x5a\x3c\xf4\x8f\x51\xb7\x99\xa5\xd4\x7a\x76\x51\x1e\x16\xf9\x6a\xd4\x1e\x9b\xe6\x0e\xc0\x0a\x3f\x68\x6f\xfd\xe8\xcb\x0e\x31\x4f\xe5\x95\x8e\xc2\x1f\x60\x03\x3c\x0f\xf4\x3c\x29\xcb\x12\x7c\xc0\xc6\xe3\x06\x14\xfb\x97\xd1\xc7\x8c\x18\x18\x56\xd9\x2f\xed\x09\x4d\x73\xd7\x34\x58\xe1\x9e\x7b\x1a\x9d\x22\xc5\x7c\xcd\xb5\x2a\x9e\xdd\xee\x78\xf9\x14\x4c\xf4\x87\x8f\x4c\x23\x06\x56\xb8\x38\x08\x62\x0f\x26\xf3\x82\xcc\xbf\x47\x16\x05\x85\x0e\x99\x25\xc5\x20\xbc\xbe\x0c\x2a\x53\x6f\x4e\x78\xec\xd3\x38\xcb\x41\xaf\x07\x58\x74\xbf\x8d\x59\xdb\x63\xba\x8b\x2c\x6c\xc6\x6c\x75\xfa\x1c\x83\xf2\x5e\xdb\x05\x97\xc7\xf0\x49\x9e\x84\xf3\xff\xcc\x49\xfa\x96\xe3\x98\xde\x6a\xe4\x5c\xfc\xb3\xcd\x76\x67\x1d\x0f\xfc\x45\x0c\x39\xd2\xc3\xaf\xd0\x93\x13\xae\xfe\x05\x00\x00\xff\xff\x5d\x9a\x63\xab\x6a\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(2019, 7, 29, 12, 22, 48, 930282528, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
